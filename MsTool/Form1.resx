<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGeLSABLcysFS3MrCExzLAhNdS0ITXUtCE52
        LghOdi4ITXUtCE11LQhNdS0ITHQsCE11LAhNdC0HS3IsAkxzLABKcysASnMqAk11LAdNdS0ITnUtCE11
        LQhNdS4ITnUuCEx0LAhMdCwIS3MrCEtzKwhKcikISnIpCEhxKARMcywAUHcxF1F4MppReDK+UXgxvFF4
        MrxSeDK8UnkyvFJ5M7xSeTK8UnkyvFJ5MrxReDK8UXgxvFJ5MrxSeTNbWH05AE10LgJSeTNzUnkyvVJ5
        MrxSeTO8UnkyvFJ5M7xSeTK8UXgyvFF3MbxQdjC8T3YvvE92L7xQdzG+UHcwjk11LQ1QeDE1Unkz61Z8
        OP9hhEX/Y4ZH/2OGR/9jhkj/ZohL/2aIS/9liEr/ZohL/2aIS/9liEr/W4A9/1J5M5xsjE0ATnYuClN6
        NMFegkH/Y4ZI/2SHSP9kh0j/ZYhK/2aIS/9liEr/ZIZI/2OFR/9ihUf/XoJC/1J5M/9QdzHeTnUvI1B4
        MTZQdzDsfZpn/8LPvf+zxKv/usmz/87Yy/+7yrT/usmz/83Yyv/E0L7/t8ev/8HOvP+bsYz/UXkymmSG
        RQBCbSAKYINDwrbFrf+6yLL/t8av/8rVxv/E0b//uMew/8LPvP/N18n/t8ev/7fGr//Bzrz/ZohM/093
        MN9Pdi8kUXgxNk93MOyJo3f/nrOQ/1l+Ov9sjVL/t8ew/2SHSf9cgT7/rL+i/4eidP9Yfjr/gZ1t/6a6
        mv9SeTKfiKZuADxoGQpmiEvCuMew/2eKTf9bgD7/p7qb/42nfP9Zfzv/gJ1r/6/Bpv9cgD7/XoJC/7jH
        sP9ujlX/T3cw3092MCRQeDE2T3Yv7Iijdv+mupr/aYtP/3mXY/+8yrX/cpJa/2qMUP+xwqf/kqqB/2iK
        Tf+Npnv/r8Gl/1d9OJ/g5d0APWkZCmaIS8K6ybP/d5Zg/2uMUf+svqL/lq2G/2mLTv+KpXj/tcWt/2yN
        Uv9ujlX/uMew/2yMUv9PdzDfT3cwJFB4MTZPdzDriqR4/8/Zzf+0xKv/u8m0/9rh2v+3x6//tcWs/9be
        1f/F0sD/xtLB/9zg3f/M0Mv/ws+9suzx7woyYAsKZYdKwsnUxf+8yrX/tsat/9Lc0f/I1MT/tMSr/8TR
        v//X39f/tsau/7jHsP/P2cz/aYpP/1B3MN9QdzEkUXgxNk93L+uNpnv/m7GM/1R7Nf9pi0//t8av/1+D
        Q/9XfTj/qLuc/5ivif+7xrX/goJ7/1VVSf+ztLH48/X5f4qldxJliEvCtcWt/2OGR/9WfDj/obaU/4ei
        dP9VfDb/e5ll/6y+ov9YfTn/Wn89/7HBp/9qi1H/UHcw31B3MSRReDI2T3Yv64yle/+pu53/bY5U/3+c
        av/Bzrv/d5Vf/2yNUv+zxKr/1NrU/39/d/89PC3/Ojkq/0xMPv+1trP25uvohWmLT8i7yrT/fZpn/3KS
        Wv+xwqf/mbCK/2yNUv+KpHj/tsau/2+PVv9vj1b/tsau/2qLUP9QdzDfUHcwJFB4MTZPdi/ri6V6/83X
        yv+vwaX/uMix/9ri2v+0xKv/t8ev/9re2/+BgXr/PDss/0A/Mf9ISDr/OTkp/05OQf+0trL3rsCj9szX
        yf+4yLH/ssOp/9Lb0P/J1MT/ssOp/8HOu//U3dL/r8Cl/7DBp//M18n/aYpP/093MN9PdzAkUHgxNk92
        L+uNpnv/mrCL/1N6M/9niUz/uMew/16CQf9wkVj/v8O9/0hIOv8/Pi//lZaQ/8DBv/9XV0v/ODco/09O
        Qf+5u7j/0dvP/2GERP9UezX/obaT/4mjdv9TejT/eJdi/6q9n/9Vezb/V306/7HBp/9sjVP/UHcw31B3
        MSRQdzE2TnYu642mfP+ou5z/aIpO/3mXY//Czrv/c5Jb/2+PVv+9yrb/q6uo/6Ojn/+3xbD/sMKm/8HD
        wP9XV0r/ODgo/1JRRP+1uLL/lKyD/2iKTv+tv6P/lq2G/2iLTv+KpHj/tsat/2qLUP9sjVL/u8mz/2+O
        Vv9Pdi/fT3cwJFB3MDZPdi/repdk/73Ltv+yw6n/tMSr/77Mt/+0xKv/s8Sq/7vKtP/K1sb/q72f/2GE
        RP9Yfjn/rsCj6sXGxfZWVkn/ODgo/1NSRv+6vbj/19/W/8DNuv+6ybL/ssOp/7XFrP+7yrT/ssKp/7TE
        q/+1xKz/Y4VI/092MN9Odi8kT3YwNlF3MexTeTT/XYFA/2GFRv9Zfjv/Vnw3/1h+Ov9hhEX/YoVG/1p/
        PP9Vezb/U3o0/1N6NP9Zfjyg9vj8f8LEwvdVVUj/ODcn/1ZWSv/EycL/b5BX/12CQf9hhUX/WH05/1d8
        OP9WfDj/Vnw5/1V6Nv9RdzL/UHcx3052LyRPdi82UXcx7E92L/+KpHj/vMu2/12BQP91lF7/W4A9/6W5
        mf+ovJz/VHo1/1N6NP9TejT/Unkz/1B3MZz5+v8H9ff6fcHCwfdYWEz/bm1l/7vFtv9ghET/lKyE/7bG
        rv9XfTn/UXgy/1F4Mv9QdzH/UHcx/1B2Mf9PdjDfTXUuJE52LzZQdjDsTXQt/5euiP/S3NH/ephl/9zk
        3P+HonT/tsat/7vLtP9TejT/Unkz/1J5M/9ReDL/T3Ywn87bxQCYrokQr8ClyMLJv/+7xbb/dpRe/1B3
        MP+luZn/ztnL/1h+O/9ReDL/UXcx/1B2Mf9QdjD/T3Yw/092MN9NdC0kTXUuNk51L+xMcyz/la2G/9Pd
        0/+3x6//7/Pz/8XSwP+/zbn/ucmx/1J5M/9ReDL/UXgy/1F3Mf9PdTCfi6VyAEdwJQpTeTXCZohL/2CE
        RP9SeTL/UXgx/6O4l//M2Mn/WH06/1B3Mf9QdjD/T3Yw/091MP9PdS//T3Uv30x0LSRNdC02TnQu7Ety
        K/+Tq4T/6u/u/+Lo4/+csY3/1d7U/+bs6f+3x67/UXcx/1B3Mf9QdzH/UHcx/092MJVegUEATnYuClF4
        MsJQdzH/UXgy/1J5NP9TejX/pbmZ/83Zy/9afj3/UXcy/092MP9PdS//TnUv/091L/9OdS/cTHMsIUx0
        LTZOdC7sS3Ir/5Sshf/3+v7/wc+8/1V6Nv+itpX/+Pr//7jIsP9QdjH/UHYx/1F3Mv9RdzLbT3YwOFB3
        MQBNdS0KUXcywlF3Mv9QdzH/aIpO/77Nt//e5t//6e/t/8fUw/+Dn3D/TnQu/091L/9OdS//T3Uw+051
        L4ZJcSoFTHMtNk50LuxMcyz/dpRf/62/o/90kl3/THMs/2OFSP+pvJ7/i6R5/092MP9QdjH/UHcx31B2
        MURUeDUATHQtAE10LgpRdzLCUXcy/1B2MP9jhkj/qbye/6/Bpv+uwaT/scOo/3uYZf9OdS//T3Uw/091
        MPxPdTCUTXQuDU10LwBMcyw1TnQu6050L/9OdC7/TXQt/050Lv9PdS//TnUu/010Lv9OdC7/T3Yw/092
        MOJOdS9JV3w1AEpyLABMcy0ATHMtClB2McFQdzH/UHcx/1F3Mf9QdzH/UXgx/1F4Mv9ReDL/UHcx/092
        MP9PdTD9TnUvmk10Lg9OdC4AAAAAAEtyLBZNcy6aTXQuwU10Lr9NdC6+TXQuvk10Lr5OdC6/TXQuv010
        Lr9OdS+2TnQuTHWWWwBIcCgAAAAAAEtyLABIbysCT3UwdE92ML5QdjG8UHcxvFB3MbxRdzK8UXgyvFF4
        MrxQdzG9T3UwwE51L5BMcy0TTHMtAAAAAAAAAAAAR3IoAERsJgVEbSYJRW0nCUZuKAlGbigJRW0mCUVt
        JwlFbScJRm4oCUhvKgZEbSYBQ20mAAAAAAAAAAAAAAAAAElxKgBHbygCS3IsCEtyLAhKcisIS3IsCEpy
        KwhJcSsISnIsCElxKghGbicJRW4mA0dvKAAvXg8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////////////////////4ABgAEAAQAAAAEAAAABAAAAAQAAAAEAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAEAAAABAAAAAwABAAcAAwAP
        AAeAD4AP//////////////////////////8=
</value>
  </data>
</root>